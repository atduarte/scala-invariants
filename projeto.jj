/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. projeto.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
    STATIC=false;
}

PARSER_BEGIN(InvariantParser)
/*Coisas p/ adicionar depois de compilar:
 SimpleNode:

  public Vector<Integer> operators;
  public String numVar;
  public boolean negative;
  public int getID() throws ParseException{
	return id;
  }


*/

package invariant.invariantEvaluator.Parser;
import java.util.HashMap;
import java.util.Vector;
import java.lang.Integer;
import java.lang.String;

public class InvariantParser/*@bgen(jjtree)*/implements InvariantParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTInvariantParserState jjtree = new JJTInvariantParserState();

/*@egen*/
	Vector<String> vars;
	InvariantParserConstants constants;
	 SimpleNode getTree(String expr) throws ParseException{
            InputStream stream = new ByteArrayInputStream(expr.getBytes());
            ReInit(stream);
                return Inv_exp();
        }


}

PARSER_END(InvariantParser)


SKIP :
{
	" " |  "\r" | "\t"
}

TOKEN:
{
          <VAR		 : "$"(["0"-"9"])+ >
        | <VAR_TAG   : "var" >
        | <VAR_LOCAL : (["a"-"z"]|["A"-"Z"])+(["a"-"z"]|["A"-"Z"]|["1"-"9"])*>
      	| <NUM		 : (["0"-"9"])*(".")?(["0"-"9"])+ >
		| <OR		 : "||" >
		| <AND		 : "&&" >
		| <REC_BRAC_O: "["  >
		| <REC_BRAC_C: "]"  >
		| <PAR_OPEN  : "("  >
		| <PAR_CLOSE : ")"  >
		| <PAR_SETO  : "{"  >
		| <PAR_SETC  : "}"  >
		| <COMMA     : ","  >
		| <EQUAL 	 : "="  >
		| <NOTEQUAL  : "!=" >
		| <INF       : "@inf">
		| <OP_SUM    :  "+" >
		| <OP_DIFF   :  "-" >
		| <OP_MUL    :  "*" >
		| <OP_DIV    :  "/" >

}

SimpleNode Inv_exp():{/*@bgen(jjtree) Inv_exp */
  SimpleNode jjtn000 = new SimpleNode(JJTINV_EXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Inv_exp */
        try {
/*@egen*/
	( VarDecl() )*
	OrExpr() "\n"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void OrExpr():{/*@bgen(jjtree) OrExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrExpr */
        try {
/*@egen*/
	AndExpr() ( <OR> AndExpr() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void AndExpr():{/*@bgen(jjtree) AndExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AndExpr */
        try {
/*@egen*/
	atomInv() ( <AND> atomInv() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void atomInv():{/*@bgen(jjtree) atomInv */
                SimpleNode jjtn000 = new SimpleNode(JJTATOMINV);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token value;}{/*@bgen(jjtree) atomInv */
        try {
/*@egen*/
	{jjtn000.operators = new Vector<Integer>();}
	value=<VAR>{jjtn000.numVar =value.toString();} (<EQUAL>{jjtn000.operators.add(constants.EQUAL);}|<NOTEQUAL>{jjtn000.operators.add(constants.NOTEQUAL);}) (Set() | Range() ) | <PAR_OPEN> OrExpr() <PAR_CLOSE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Range():{/*@bgen(jjtree) Range */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Range */
        try {
/*@egen*/
	{jjtn000.operators = new Vector<Integer>();}

	 (<REC_BRAC_O> {jjtn000.operators.add(constants.REC_BRAC_O);}| <REC_BRAC_C>{jjtn000.operators.add(constants.REC_BRAC_C);}) Aritm()","Aritm() (<REC_BRAC_O>/*@bgen(jjtree)*/
                                                                                                                                                                   {
                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                   }
/*@egen*/ {jjtn000.operators.add(constants.REC_BRAC_O);}| <REC_BRAC_C>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                  jjtc000 = false;
                                                                                                                                                                                                                                }
/*@egen*/ {jjtn000.operators.add(constants.REC_BRAC_C);})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Set():{/*@bgen(jjtree) Set */
  SimpleNode jjtn000 = new SimpleNode(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Set */
        try {
/*@egen*/
	<PAR_SETO> Aritm() (","Aritm())* <PAR_SETC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VarDecl():{/*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarDecl */
        try {
/*@egen*/
	<VAR_TAG> <VAR_LOCAL> <EQUAL> Aritm()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}






void Aritm():{/*@bgen(jjtree) Aritm */
  SimpleNode jjtn000 = new SimpleNode(JJTARITM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Aritm */
        try {
/*@egen*/
	SumExpr() | <INF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void SumExpr():{/*@bgen(jjtree) SumExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSUMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SumExpr */
        try {
/*@egen*/
	{jjtn000.operators = new Vector<Integer>();}

	multExpr() ( (<OP_SUM>{jjtn000.operators.add(constants.OP_SUM);}|<OP_DIFF>{jjtn000.operators.add(constants.OP_DIFF);})  multExpr() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void multExpr():{/*@bgen(jjtree) multExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) multExpr */
        try {
/*@egen*/
	{jjtn000.operators = new Vector<Integer>();}

	atom() ( (	<OP_MUL>{jjtn000.operators.add(constants.OP_MUL);}	|	<OP_DIV>{jjtn000.operators.add(constants.OP_DIV);}	) atom() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void atom():{/*@bgen(jjtree) atom */
             SimpleNode jjtn000 = new SimpleNode(JJTATOM);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token value;}{/*@bgen(jjtree) atom */
        try {
/*@egen*/



	{jjtn000.operators = new Vector<Integer>();jjtn000.negative=false;}
	[<OP_DIFF>{jjtn000.negative = true;}|<OP_SUM>]
	(
		(
			value=<NUM>{jjtn000.operators.add(constants.NUM);} |
			value=<VAR>{jjtn000.operators.add(constants.EQUAL);}
		)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.numVar =value.toString();}	|
	 	<PAR_OPEN> SumExpr() <PAR_CLOSE>
	 )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}
